<% include ./partials/header.ejs %>
<script src="https://api.tiles.mapbox.com/mapbox-gl-js/v1.6.1/mapbox-gl.js"></script>
<link href="https://api.tiles.mapbox.com/mapbox-gl-js/v1.6.1/mapbox-gl.css" rel="stylesheet" />
<script src='https://npmcdn.com/@turf/turf/turf.min.js'></script>



<div class="container-fluid">
    <div class="row">
        <% include ./partials/navbar.ejs %>

        <script>
            // Sets the current page as active in navbar
            document.getElementById('map-link').classList.add('active');
            document.getElementById('active-box-map').classList.add('navigation-link-left-box');
        </script>

        <div class="col-md-9 col-lg-10 ml-sm-auto map-container">

            <div class="Map" id="map-main">
                <nav class="menu RB-floors">
                    <button class="" id="RB3">L3</button>
                    <button class="" id="RB2">L2</button>
                    <button class="active" id="RB1">L1</button>
                </nav>
                <nav class="menu HS-floors" style="display: none">
                    <button class="" id="HSM">M</button>
                    <button class="" id="HS1">L1</button>
                </nav>
                <nav class="menu AP-floors" style="display: none">
                    <button class="" id="AP1">L1</button>

                </nav>
                <div id="map"></div>
            </div>

            <div class="col-md-3 jumbotron" id="right-side-bar">
                <button id="close" class="btn btn-danger m-1">Close</button>
                <h1 id="info" class="heading-font">h</h1>
                <h4>Event Description:</h4>
                <p class="">
                    Lorem ipsum dolor sit amet, consriver-buildingtetur adipiscing elit, sed do eiusmod tempor
                    incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam.
                </p>
            </div>
        </div>
    </div>
</div>

<% include ./partials/footer.ejs %>

<script>



    mapboxgl.accessToken = 'pk.eyJ1IjoidGVqYXNocGF0ZWwiLCJhIjoiY2p5YWJoaHhrMDF4bzNtbzg1dzBwbGZyZiJ9.3pAUNTmqoMsgpEWoOZfKlw';
    var Source;
    const Http = new XMLHttpRequest();
    Http.open("GET", 'https://cuhacking.com/api/map', true);
    Http.send(null);
    Http.onreadystatechange = (e) => {
        Source = JSON.parse(Http.responseText).map.map;
        for (var id in Source) {
            if (Source[id] != null) {
                applyMapStyle(Source[id], id);

            }
        }
    }

    var map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/basic-v8',
        center: [-75.6972, 45.38296],
        zoom: 17,
        bearing: -125
    });

    map.loadImage("/static/png/elevators.png", (e, image) => {
        map.addImage("elevators", image);
    });
    map.loadImage("/static/png/Stairs.png", (e, image) => {
        map.addImage("Stairs", image);
    });
    map.loadImage("/static/png/Washroom Male.png", (e, image) => {
        map.addImage("male", image);
    });
    map.loadImage("/static/png/Washroom Female.png", (e, image) => {
        map.addImage("female", image);
    });
    map.loadImage("/static/png/Washroom Neutral.png", (e, image) => {
        map.addImage("neutral", image);
    });
    map.loadImage("/static/png/Water Fountain 2.png", (e, image) => {
        map.addImage("fountain", image);
    });
    map.loadImage("/static/png/Information.png", (e, image) => {
        map.addImage("Information", image);
    });



    function applyMapStyle(source, id) {
        map.on('load', function () {

            var mapSource = source.geometry;

            map.addSource(id, { type: 'geojson', data: mapSource });


            map.addLayer({
                "id": id + "-backdrop",
                "type": "fill",
                "source": id,
                "paint": {
                    'fill-color': "#545454"
                }
            });

            map.addLayer({
                "id": id,
                "type": "fill",
                "source": id,
                'layout': {
                    'visibility': 'visible'
                },
                "paint": {
                    'fill-color': [
                        "match",
                        ["get", "room-type"],

                        "room",
                        [
                            "case",
                            ["==", ["get", "available"], true],
                            "#b17fe2",
                            "#CCCCCC"
                        ],
                        "washroom",
                        "#ffe544",
                        "elevator",
                        "#ff1131",
                        "stairs",
                        "#008ddc",
                        "hallway",
                        "#FEFEFE",
                        "#545454"
                    ]
                }
            });

            map.addLayer({
                "id": id + "-name",
                "type": "symbol",
                "source": id,
                'layout': {
                    'visibility': 'visible',
                    "text-field": ["get", "name"]
                },
                "paint": {
                    "text-color": "#FFFFFF",
                    "text-halo-width": 1,
                    "text-halo-color": "#000000"

                },

                "maxzoom": 18
            });

            map.addLayer({
                "id": id + "-lines",
                "type": "line",
                "source": id,
                'layout': {
                    'visibility': 'visible'
                },
                "paint": {
                    "line-color": "#212121",
                    "line-width":
                        [
                            'interpolate',
                            ['linear'],
                            ['zoom'],
                            18, 0, 19, 3
                        ]
                },
            });

            map.addLayer({
                "id": id + "-backdrop-lines",
                "type": "line",
                "source": id,
                'layout': {
                    'visibility': 'visible'
                },
                "paint": {
                    "line-color": "#212121",
                    "line-width": 5,
                    "line-opacity": [
                        'interpolate',
                        ['linear'],
                        ['zoom'],
                        17, 0, 18, 1
                    ]
                },
            });

            map.addLayer({
                "id": id + "-symbols",
                "type": "symbol",
                "source": id,

                "layout": {
                    "text-field": [
                        "case",
                        ["==", ["get", "room-type"], "room"],
                        ["get", "name"],
                        ["all",
                            ["==", ["get", "room-type"], "washroom"],
                            ["==", ["get", "name"], "Men's"]
                        ],
                        "Male",
                        ["all",
                            ["==", ["get", "room-type"], "washroom"],
                            ["==", ["get", "name"], "Women's"]
                        ],
                        "Female",
                        ["all",
                            ["==", ["get", "room-type"], "washroom"],
                            ["==", ["get", "name"], "Neutral"]
                        ],
                        "Neutral",
                        ""
                    ],
                    "icon-image": [
                        "case",
                        ["==", ["get", "room-type"], "stairs"],
                        "Stairs",
                        ["==", ["get", "room-type"], "elevator"],
                        "elevators",
                        ["all",
                            ["==", ["get", "room-type"], "washroom"],
                            ["==", ["get", "name"], "Men's"]
                        ],
                        "male",
                        ["all",
                            ["==", ["get", "room-type"], "washroom"],
                            ["==", ["get", "name"], "Women's"]
                        ],
                        "female",
                        ["all",
                            ["==", ["get", "room-type"], "washroom"],
                            ["==", ["get", "name"], "Neutral"]
                        ],
                        "neutral",
                        ["==", ["get", "point-type"], "info"],
                        "Information",
                        ["==", ["get", "point-type"], "fountain"],
                        "fountain",
                        ""

                    ],
                    "icon-size": 0.1,
                    "text-variable-anchor": ["top"],
                    "text-radial-offset": 0.5,
                    "text-justify": "auto",
                    'visibility': 'visible'
                    // },
                    // "paint": {
                    //     "text-color": "#ffffff"
                },
                "minzoom": 18.3
            });

            setLayerFilters(1, id);

        });

    }



    function setLayerFilters(floor, id) {

        map.setFilter(id + '-backdrop', ["all",
            ["==", ["get", "floor"], id + floor],
            ["==", ["get", "type"], "backdrop"]
        ]);
        map.setFilter(id, ["all",
            ["==", ["get", "floor"], id + floor],
            ["==", ["get", "type"], "room"]
        ]);
        map.setFilter(id + '-name', ["all",
            ["==", ["get", "floor"], id + floor],
            ["==", ["get", "type"], "backdrop"]
        ]);
        map.setFilter(id + '-lines',
            ["all",
                ["==", ["get", "floor"], id + floor],
                ["==", ["get", "type"], "line"]
            ]);
        map.setFilter(id + '-backdrop-lines', ["all",
            ["==", ["get", "floor"], id + floor],
            ["==", ["get", "type"], "backdrop-line"]
        ]);
        map.setFilter(id + '-symbols', ["all",
            ["==", ["get", "floor"], id + floor],
            ["==", ["get", "label"], true]
        ]);
    }

</script>
<script>
    document.getElementById("RB1").onclick = function L1() {
        setLayerFilters(1, "RB");
        for (var k = 1; k < 4; k++) {
            document.getElementById("RB" + k).className = "";
        }
        document.getElementById("RB1").className = "active";
    };
    document.getElementById("RB2").onclick = function L1() {
        setLayerFilters(2, "RB");
        for (var k = 1; k < 4; k++) {
            document.getElementById("RB" + k).className = "";
        }
        document.getElementById("RB2").className = "active";
    };
    document.getElementById("RB3").onclick = function L1() {
        setLayerFilters(3, "RB");
        for (var k = 1; k < 4; k++) {
            document.getElementById("RB" + k).className = "";
        }
        document.getElementById("RB3").className = "active";
    };

    document.getElementById("HS1").onclick = function L1() {
        setLayerFilters(1, "HS");

        document.getElementById("HSM").className = "";

        document.getElementById("HS1").className = "active";
    };
    document.getElementById("HSM").onclick = function L1() {
        setLayerFilters("M", "HS");
        document.getElementById("HS1").className = "";

        document.getElementById("HSM").className = "active";
    };

    document.getElementById("AP1").onclick = function L1() {
        setLayerFilters(1, "AP");
        for (var k = 1; k < 2; k++) {
            document.getElementById("AP" + k).className = "";
        }
        document.getElementById("AP1").className = "active";
    };

    map.on("moveend", () => {

        var buildings = ['RB', 'HS', 'AP'];
        var distances = [
            turf.distance(turf.point([map.getBounds().getCenter().lng, map.getBounds().getCenter().lat]),
                turf.point([Source['RB'].center[0], Source['RB'].center[1]]),
                { units: 'miles' }),
            turf.distance(turf.point([map.getBounds().getCenter().lng, map.getBounds().getCenter().lat]),
                turf.point([Source['HS'].center[0], Source['HS'].center[1]]),
                { units: 'miles' }),
            turf.distance(turf.point([map.getBounds().getCenter().lng, map.getBounds().getCenter().lat]),
                turf.point([Source['AP'].center[0], Source['AP'].center[1]]),
                { units: 'miles' })
        ]
        var minIndex = 0;
        var minDistance = distances[0]
        distances.forEach((x, index) => {
            if (x < minDistance) {
                minIndex = index;
                minDistance = x;
            }
        })
        setUpButtons(buildings[minIndex]);
        document.getElementById("HS1").className = "active";
        document.getElementById("AP1").className = "active";
    })

    // Change the cursor to a pointer when the mouse is over the states layer. 
    map.on('mouseenter', 'RB', function () {
        map.getCanvas().style.cursor = 'pointer';
    });

    // Change it back to a pointer when it leaves. 
    map.on('mouseleave', 'RB', function () {
        map.getCanvas().style.cursor = '';
    });

    function setUpButtons(id) {
        if (id == 'RB') {
            document.querySelector('.RB-floors').style.display = "block";
            document.querySelector('.HS-floors').style.display = "none";
            document.querySelector('.AP-floors').style.display = "none";
        } else if (id == 'HS') {
            document.querySelector('.RB-floors').style.display = "none";
            document.querySelector('.HS-floors').style.display = "block";
            document.querySelector('.AP-floors').style.display = "none";

        } else {
            document.querySelector('.RB-floors').style.display = "none";
            document.querySelector('.HS-floors').style.display = "none";
            document.querySelector('.AP-floors').style.display = "block";
        }
    }


</script>